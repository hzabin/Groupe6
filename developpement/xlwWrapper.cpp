//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "composant1.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "composant1";
};


// registrations start here


namespace
{
XLRegistration::Arg
calculerArgs[]=
{
{ "typePayoff","too lazy to comment this one ","XLF_OPER"},
{ "maturity","too lazy to comment this one ","B"},
{ "strike","too lazy to comment this one ","B"},
{ "nbTrials","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registercalculer("xlcalculer",
"calculer",
"too lazy to comment this function ",
LibraryName,
calculerArgs,
4
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlcalculer(
LPXLFOPER typePayoffa,
double maturity,
double strike,
double nbTrialsa)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper typePayoffb(
	(typePayoffa));
std::string typePayoff(
	typePayoffb.AsString("typePayoff"));



int nbTrials(
	static_cast<int>(nbTrialsa));

double result(
	calculer(
		typePayoff,
		maturity,
		strike,
		nbTrials)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
intialiserArgs[]=
{
{ "file_name","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerintialiser("xlintialiser",
"intialiser",
"too lazy to comment this function ",
LibraryName,
intialiserArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlintialiser(
LPXLFOPER file_namea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper file_nameb(
	(file_namea));
std::string file_name(
	file_nameb.AsString("file_name"));

std::string result(
	intialiser(
		file_name)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
  XLRegistration::XLFunctionRegistrationHelper
registergetComposant1Version("xlgetComposant1Version",
"getComposant1Version",
"too lazy to comment this function ",
LibraryName,
0,
0
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlgetComposant1Version(
)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

std::string result(
	getComposant1Version());
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

